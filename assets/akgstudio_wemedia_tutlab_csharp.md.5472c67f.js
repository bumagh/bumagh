import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.1c8de9a3.js";const C=JSON.parse('{"title":"闭包引用","description":"","frontmatter":{},"headers":[],"relativePath":"akgstudio/wemedia/tutlab/csharp.md","filePath":"akgstudio/wemedia/tutlab/csharp.md"}'),l={name:"akgstudio/wemedia/tutlab/csharp.md"},p=o(`<h1 id="闭包引用" tabindex="-1">闭包引用 <a class="header-anchor" href="#闭包引用" aria-label="Permalink to &quot;闭包引用&quot;">​</a></h1><p>在你的代码中，<code>Start</code> 函数中的 <code>Debug.Log(i)</code> 输出只有一个 <code>6</code>，问题出在 <code>equipBtns[i].onClick.AddListener()</code> 的 <code>onClick</code> 事件处理逻辑中。</p><p>具体来说，你在 <code>for</code> 循环中给每个按钮添加了点击事件的监听器：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">equipBtns[i].onClick.</span><span style="color:#B392F0;">AddListener</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    typeTrans.gameObject.</span><span style="color:#B392F0;">SetActive</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    detailTrans.gameObject.</span><span style="color:#B392F0;">SetActive</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ClearUI</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prefab</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">Load</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">GameObject</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&quot;Prefabs/Arcade/GoodsItem&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Debug.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(i);  </span><span style="color:#6A737D;">// 这里的 i 其实是一个捕获的外部变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">goodsItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigData.goods.</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ele</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ele.GoodsTypeId </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> ele.GoodsTypeChild </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">equipBtns[i].onClick.</span><span style="color:#6F42C1;">AddListener</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    typeTrans.gameObject.</span><span style="color:#6F42C1;">SetActive</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    detailTrans.gameObject.</span><span style="color:#6F42C1;">SetActive</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ClearUI</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prefab</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">Load</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">GameObject</span><span style="color:#24292E;">&gt;(</span><span style="color:#032F62;">&quot;Prefabs/Arcade/GoodsItem&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Debug.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(i);  </span><span style="color:#6A737D;">// 这里的 i 其实是一个捕获的外部变量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">goodsItem</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigData.goods.</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ele</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ele.GoodsTypeId </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> ele.GoodsTypeChild </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="问题的根源" tabindex="-1">问题的根源 <a class="header-anchor" href="#问题的根源" aria-label="Permalink to &quot;问题的根源&quot;">​</a></h3><p>在 <code>onClick</code> 事件中，你使用了闭包（<code>()=&gt;{}</code>）来捕获变量 <code>i</code>，但是由于 C# 中闭包的捕获机制，<code>i</code> 是按引用捕获的。这意味着，在每次点击时，闭包中的 <code>i</code> 会指向循环结束后的最终值，而不是当时的循环值。因此，当你点击任何按钮时，<code>i</code> 的值都会是循环结束时的值，即 <code>6</code>（<code>equipStrs</code> 数组的长度）。</p><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><p>为了确保每个按钮的点击事件能捕获到正确的 <code>i</code> 值，你可以通过局部变量来显式地传递 <code>i</code> 的值。修改 <code>onClick</code> 的写法如下：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> equipStrs.Length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;  </span><span style="color:#6A737D;">// 在此处显式保存 i 的值</span></span>
<span class="line"><span style="color:#E1E4E8;">    equipBtns[i].onClick.</span><span style="color:#B392F0;">AddListener</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        typeTrans.gameObject.</span><span style="color:#B392F0;">SetActive</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        detailTrans.gameObject.</span><span style="color:#B392F0;">SetActive</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">ClearUI</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prefab</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">Load</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">GameObject</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&quot;Prefabs/Arcade/GoodsItem&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Debug.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(index);  </span><span style="color:#6A737D;">// 使用局部变量 index，而不是 i</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">goodsItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigData.goods.</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ele</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ele.GoodsTypeId </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> ele.GoodsTypeChild </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> equipStrs.Length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;  </span><span style="color:#6A737D;">// 在此处显式保存 i 的值</span></span>
<span class="line"><span style="color:#24292E;">    equipBtns[i].onClick.</span><span style="color:#6F42C1;">AddListener</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        typeTrans.gameObject.</span><span style="color:#6F42C1;">SetActive</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        detailTrans.gameObject.</span><span style="color:#6F42C1;">SetActive</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">ClearUI</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prefab</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">Load</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">GameObject</span><span style="color:#24292E;">&gt;(</span><span style="color:#032F62;">&quot;Prefabs/Arcade/GoodsItem&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Debug.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(index);  </span><span style="color:#6A737D;">// 使用局部变量 index，而不是 i</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">goodsItem</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigData.goods.</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ele</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ele.GoodsTypeId </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> ele.GoodsTypeChild </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="解释" tabindex="-1">解释 <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释&quot;">​</a></h3><ol><li><code>int index = i;</code> 将 <code>i</code> 的当前值复制到局部变量 <code>index</code>，然后在 <code>onClick</code> 事件中使用 <code>index</code> 而不是直接使用 <code>i</code>。</li><li>这样每个按钮的点击事件就会使用当时循环中的 <code>i</code> 值，而不是循环结束后的 <code>6</code>。</li></ol><p>现在，<code>Debug.Log</code> 将打印出正确的值（<code>0</code> 到 <code>5</code>），而不是一直输出 <code>6</code>。</p>`,12),e=[p];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const g=s(l,[["render",c]]);export{C as __pageData,g as default};
